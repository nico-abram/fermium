language: rust
git:
quiet: true
rust:
  - stable
  
cache:
  - apt
  - homebrew
  - cargo

matrix:
  include:
  - env: ARCH=i686-unknown-linux-gnu
    os: linux
  - env: ARCH=x86_64-unknown-linux-gnu
    os: linux
  - env: ARCH=i686-pc-windows-msvc
    os: windows
  - env: ARCH=x86_64-pc-windows-msvc
    os: windows
  - env: ARCH=x86_64-apple-darwin
    os: osx
  - env: ARCH=i686-apple-darwin
    os: osx
  #fermium doesn't fully work on these yet
  allow_failures:
  - env: ARCH=i686-apple-darwin
    os: osx
  - env: ARCH=i686-unknown-linux-gnu
    os: linux
  - env: ARCH=i686-pc-windows-msvc
    os: windows

addons:
  apt:
    packages:
    - libx11-dev
    - libsdl2-dev
    - libsdl2-image-dev
    - libsdl2-mixer-dev
    - libsdl2-ttf-dev
    - libegl1-mesa-dev
    - libgles2-mesa-dev
  homebrew:
    update: true
    packages:
    - sdl2


before_script:
  # Make sure we have the bindgen cli program up to date
  - rustup component add rustfmt
  - (test -x $HOME/.cargo/bin/cargo-install-update || cargo install cargo-update)
  - (test -x $HOME/.cargo/bin/bindgen || cargo install bindgen)
  - cargo install-update -a
  - sdl2-config --cflags
  - sdl2-config --libs
  - sdl2-config --static-libs

script:
  - rustup target add $ARCH
  # We cannot run doctests because rustdoc is silly and tries to interpret too
  # much stuff as code blocks and then dies when the "code blocks" don't contain
  # valid rust. https://github.com/rust-lang/rust/issues/59867 We should still
  # run all the other tests of course.

  # First we verify the pre-generated bindings.
  - cargo build --target=$ARCH
  - cargo build --target=$ARCH --examples
  - cargo test --target=$ARCH --lib --tests

  # Next we attempt with `use_bindgen_bin`
  - cargo clean
  - cargo build --target=$ARCH --features="use_bindgen_bin"
  - cargo build --target=$ARCH --features="use_bindgen_bin" --examples
  - cargo test --target=$ARCH --features="use_bindgen_bin" --lib --tests

  # Next we attempt with `use_bindgen_lib`
  - cargo clean
  - cargo build --target=$ARCH --features="use_bindgen_lib"
  - cargo build --target=$ARCH --features="use_bindgen_lib" --examples
  - cargo test --target=$ARCH --features="use_bindgen_lib" --lib --tests
  
  # Next we attempt with `dynamic_link` (using builtin bindings)
  - cargo clean
  - cargo build --target=$ARCH --features="dynamic_link"
  - cargo build --target=$ARCH --features="dynamic_link" --examples
  - cargo test --target=$ARCH --features="dynamic_link" --lib --tests
